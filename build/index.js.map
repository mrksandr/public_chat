{"version":3,"sources":["../src/index.js"],"names":["app","server","createServer","io","swaggerDocument","load","use","json","limit","bodyLimit","sequelize","authenticate","then","console","log","db_name","catch","error","err","sync","serve","setup","req","res","next","Error","status","locals","message","get","render","path","require","static","join","__dirname","sendFile","listen","port","info","address"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAGA;;;;AACA;;;;AACA;;;;AAEA;;;;;;AANA;;AAQA,IAAMA,MAAM,wBAAZ;AACA,IAAMC,SAAS,eAAKC,YAAL,CAAkBF,GAAlB,CAAf;AACA,IAAMG,KAAK,sBAASF,MAAT,CAAX;;AAEA,IAAMG,kBAAkB,iBAAKC,IAAL,CAAU,eAAV,CAAxB;;AAEA,sBAAaF,EAAb;;AAEAH,IAAIM,GAAJ,CACE,qBAAWC,IAAX,CAAgB;AACdC,SAAO,iBAAOC;AADA,CAAhB,CADF;;AAMA,iBAAOC,SAAP,CACGC,YADH,GAEGC,IAFH,CAEQ,YAAM;AACVC,UAAQC,GAAR,CACE,kDADF,EAEE,iBAAOC,OAFT;AAID,CAPH,EAQGC,KARH,CAQS,eAAO;AACZH,UAAQI,KAAR,CAAc,+BAAd,EAA+C,iBAAOF,OAAtD,EAA+DG,GAA/D;AACD,CAVH;;AAYA,IAAI,gBAAQ,aAAZ,EAA2B;AACzB,mBAAOR,SAAP,CAAiBS,IAAjB;AACA;AACD;;AAEDnB,IAAIM,GAAJ,CAAQ,SAAR;;AAEAN,IAAIM,GAAJ,CAAQ,WAAR,EAAqB,2BAAUc,KAA/B,EAAsC,2BAAUC,KAAV,CAAgBjB,eAAhB,CAAtC;;AAEAJ,IAAIM,GAAJ,CAAQ,QAAR,EAAkB,UAACgB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACpC,MAAMN,MAAM,IAAIO,KAAJ,CAAU,WAAV,CAAZ;AACAP,MAAIQ,MAAJ,GAAa,GAAb;AACAF,OAAKN,GAAL;AACD,CAJD;;AAMAlB,IAAIM,GAAJ,CAAQ,UAACY,GAAD,EAAMI,GAAN,EAAWC,GAAX,EAAgBC,IAAhB,EAAyB;AAC/BD,MAAII,MAAJ,CAAWC,OAAX,GAAqBV,IAAIU,OAAzB;AACAL,MAAII,MAAJ,CAAWV,KAAX,GAAmBK,IAAItB,GAAJ,CAAQ6B,GAAR,CAAY,KAAZ,MAAuB,aAAvB,GAAuCX,GAAvC,GAA6C,EAAhE;;AAEAK,MAAIG,MAAJ,CAAWT,MAAMS,MAAN,IAAgB,GAA3B;AACAH,MAAIO,MAAJ,CAAW,OAAX;AACD,CAND;;AAQA,IAAI,gBAAQ,YAAZ,EAA0B;AACxB,MAAMC,OAAOC,QAAQ,MAAR,CAAb;;AAEAhC,MAAIM,GAAJ,CACE,SADF,EAEE,kBAAQ2B,MAAR,CAAeF,KAAKG,IAAL,CAAUC,SAAV,EAAqB,QAArB,EAA+B,QAA/B,EAAyC,OAAzC,EAAkD,QAAlD,CAAf,CAFF;;AAKAnC,MAAI6B,GAAJ,CAAQ,GAAR,EAAa,UAACP,GAAD,EAAMC,GAAN,EAAc;AACzBA,QAAIa,QAAJ,CACEL,KAAKG,IAAL,CAAUC,SAAV,EAAqB,QAArB,EAA+B,QAA/B,EAAyC,OAAzC,EAAkD,YAAlD,CADF;AAGD,GAJD;AAKD;;AAEDlC,OAAOoC,MAAP,CAAc,iBAAOC,IAArB,EAA2B,eAAO;AAChC,MAAIpB,GAAJ,EAAS;AACPL,YAAQC,GAAR,CAAYI,GAAZ;AACD;AACDL,UAAQ0B,IAAR,uCAAuCtC,OAAOuC,OAAP,GAAiBF,IAAxD;AACD,CALD;;kBAOetC,G","file":"index.js","sourcesContent":["import http from 'http';\nimport express from 'express';\nimport socketIO from 'socket.io';\nimport bodyParser from 'body-parser';\nimport Sequelize from 'sequelize';\nimport swaggerUi from 'swagger-ui-express';\nimport YAML from 'yamljs';\n//import path from 'path';\n\nimport config, { env } from './config';\nimport routes from './routes/v1';\nimport models from './models';\n\nimport socketEvents from './socket';\n\nconst app = express();\nconst server = http.createServer(app);\nconst io = socketIO(server);\n\nconst swaggerDocument = YAML.load('./swagger.yml');\n\nsocketEvents(io);\n\napp.use(\n  bodyParser.json({\n    limit: config.bodyLimit,\n  }),\n);\n\nmodels.sequelize\n  .authenticate()\n  .then(() => {\n    console.log(\n      'DB Connection has been established successfully:',\n      config.db_name,\n    );\n  })\n  .catch(err => {\n    console.error('There is connection in ERROR:', config.db_name, err);\n  });\n\nif (env === 'development') {\n  models.sequelize.sync();\n  // models.sequelize.sync({ force: true }); // for test\n}\n\napp.use('/api/v1', routes);\n\napp.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerDocument));\n\napp.use('/api/*', (req, res, next) => {\n  const err = new Error('Not found');\n  err.status = 404;\n  next(err);\n});\n\napp.use((err, req, res, next) => {\n  res.locals.message = err.message;\n  res.locals.error = req.app.get('env') === 'development' ? err : {};\n\n  res.status(error.status || 500);\n  res.render('error');\n});\n\nif (env === 'production') {\n  const path = require('path');\n\n  app.use(\n    '/static',\n    express.static(path.join(__dirname, '../src', 'client', 'build', 'static')),\n  );\n\n  app.get('*', (req, res) => {\n    res.sendFile(\n      path.join(__dirname, '../src', 'client', 'build', 'index.html'),\n    );\n  });\n}\n\nserver.listen(config.port, err => {\n  if (err) {\n    console.log(err);\n  }\n  console.info(`==> 🌎 Started on port ${server.address().port}`);\n});\n\nexport default app;\n"]}